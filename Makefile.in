###
###	@configure_input@
###

.PHONY:		all targets examples install clean distclean depend release doc build test reinstall

.SUFFIXES:	.ml .mli .cmx .cmi .cmo .cmxa .cma .c @EXT_OBJ@

INSTALLDIR	= @INSTALLDIR@
INSTALL		= @INSTALL@
INSTALLDATA	= @INSTALL_DATA@

FINDLIB = @OCAMLFIND@
OCAMLC = @OCAMLC@
OCAMLOPT = @OCAMLOPT@
OCAMLDEP = @OCAMLDEP@
OCAMLMKLIB = @OCAMLMKLIB@

EXT_LIB = @EXT_LIB@
EXT_OBJ = @EXT_OBJ@
EXT_DLL = @EXT_DLL@

OCAMLVERSION_MAJOR = @OCAMLVERSION_MAJOR@

FLAGS		= -g
ifeq "$(OCAMLVERSION_MAJOR)" "4"
FLAGS		+= -bin-annot
endif
LIBS		=

CFLAGS		= @CFLAGS@ @DEFS@ -Wall

CURLHELPEROBJS	= curl-helper$(EXT_OBJ)
CURLOBJS	= curl.cmx
CURLBCOBJS	= $(CURLOBJS:.cmx=.cmo)

CLIBS = @CURLLIBS@

TARGETS := curl.cma libcurl-helper$(EXT_LIB) dllcurl-helper$(EXT_DLL)
ifneq (@OCAML_PKG_lwt@,no)
TARGETS += curl_lwt.cmo
endif
ifeq (@OCAMLBEST@,opt)
TARGETS += curl.cmxa
ifneq (@OCAML_PKG_lwt@,no)
TARGETS += curl_lwt.cmx
endif
endif

INSTALL_TARGETS = curl$(EXT_LIB) curl.cmi curl.ml curl.mli $(TARGETS)
ifeq "$(OCAMLVERSION_MAJOR)" "4"
INSTALL_TARGETS += curl.cmt curl.cmti
endif
ifneq (@OCAML_PKG_lwt@,no)
INSTALL_TARGETS += curl_lwt.cmi curl_lwt.ml curl_lwt.mli curl_lwt$(EXT_OBJ)
ifeq "$(OCAMLVERSION_MAJOR)" "4"
INSTALL_TARGETS += curl_lwt.cmt curl_lwt.cmti
endif
endif

all:
		@$(MAKE) depend
		@$(MAKE) $(TARGETS)

build: all

test: examples
	examples/test_cb_exn
	examples/test_memory_leaks
ifneq (@OCAML_PKG_lwt@,no)
	examples/test_lwt_unit
endif
ifeq (@OCAMLBEST@,opt)
	examples/test_cb_exn.opt
	examples/test_memory_leaks.opt
ifneq (@OCAML_PKG_lwt@,no)
	examples/test_lwt_unit.opt
endif
endif

doc:
		mkdir -p doc
ifneq (@OCAML_PKG_lwt@,no)
		ocamlfind ocamldoc -html -d doc -package lwt curl.mli curl_lwt.mli
else
		ocamldoc -html -d doc curl.mli
endif

examples:
		(cd examples; $(MAKE))

curl.cma:	$(CURLBCOBJS) dllcurl-helper$(EXT_DLL)
		$(OCAMLMKLIB) -o curl $(CURLBCOBJS) -oc curl-helper $(CLIBS)

curl.cmxa:	$(CURLOBJS) dllcurl-helper$(EXT_DLL)
		$(OCAMLMKLIB) -o curl $(CURLOBJS) -oc curl-helper $(CLIBS)

curl_lwt.cmo: curl_lwt.ml
	$(FINDLIB) c -package lwt.unix -c $(FLAGS) $< -o $@

curl_lwt.cmx: curl_lwt.ml
	$(FINDLIB) opt -package lwt.unix -c $(FLAGS) $< -o $@

curl_lwt.cmi: curl_lwt.mli
	$(FINDLIB) c -package lwt -c $(FLAGS) $< -o $@

.ml.cmx:
		$(OCAMLOPT) -c $(FLAGS) $< -o $@

.mli.cmi:
		$(OCAMLC) -c $(FLAGS) $< -o $@

.ml.cmo:
		$(OCAMLC) -c $(FLAGS) $< -o $@

libcurl-helper$(EXT_LIB) dllcurl-helper$(EXT_DLL):	$(CURLHELPEROBJS)
		$(OCAMLMKLIB) -oc curl-helper $(CURLHELPEROBJS) $(CLIBS)

.c$(EXT_OBJ):
		$(OCAMLC) -c -ccopt "$(CFLAGS)" $<

install:
ifneq (@OCAMLFIND@,no)
		$(FINDLIB) install -patch-version @PACKAGE_VERSION@ -ldconf ignore curl META $(INSTALL_TARGETS)
else
		mkdir -p $(INSTALLDIR)
		$(INSTALLDATA) curl.cma $(INSTALLDIR)
ifeq (@OCAMLBEST@,opt)
		$(INSTALLDATA) curl.cmxa $(INSTALLDIR)
endif
		$(INSTALLDATA) curl.mli curl.cmi $(INSTALLDIR)
		$(INSTALLDATA) curl$(EXT_LIB) libcurl-helper$(EXT_LIB) $(INSTALLDIR)
endif

uninstall:
ifneq (@OCAMLFIND@,no)
		$(FINDLIB) remove curl
else
		(cd $(INSTALLDIR) && rm -f curl.cma curl.cmxa curl.mli curl.cmi curl$(EXT_LIB) libcurl-helper$(EXT_LIB))
		rmdir $(INSTALLDIR)
endif

reinstall:
	$(MAKE) uninstall
	$(MAKE) install

NAME=@PACKAGE_NAME@-@PACKAGE_VERSION@

release:
	git tag -a -m @PACKAGE_VERSION@ @PACKAGE_VERSION@
	git archive --prefix=$(NAME)/ @PACKAGE_VERSION@ | gzip > $(NAME).tar.gz
	gpg -a -b $(NAME).tar.gz

clean:
		@rm -f $(TARGETS) *~ *.cm* *$(EXT_OBJ) *$(EXT_LIB) *$(EXT_DLL) .depend core
		@(cd examples; $(MAKE) clean)

distclean: clean
		@rm -f config.log config.status config.h examples/Makefile
		@rm -f Makefile

depend:
		@$(OCAMLDEP) *.mli *.ml > .depend

ifeq ($(wildcard .depend),.depend)
ifneq ($(MAKECMDGOALS),clean)
include .depend
endif
endif
